import { useState, useEffect, useCallback } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInWithCustomToken, signInAnonymously, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, doc, setDoc, getDoc, onSnapshot, collection, query, where, getDocs, runTransaction, updateDoc, arrayUnion } from 'firebase/firestore';

// Konstanta global yang disediakan oleh lingkungan Canvas
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
const MIN_WITHDRAWAL_AMOUNT = 50000;

// Hardcoded UID Admin. Ganti dengan UID Anda setelah mendaftar
// Untuk menemukan UID Anda, login ke aplikasi dan lihat di konsol browser.
// Misalnya, console.log(user.uid)
const adminUid = "F378n3W16WbN66n16w3yT97k60N2"; // Ganti dengan UID admin yang valid

// Inisialisasi Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const auth = getAuth(app);

// Komponen utama aplikasi
const App = () => {
  // State untuk data aplikasi
  const [user, setUser] = useState(null);
  const [currentPage, setCurrentPage] = useState('register');
  const [isLoading, setIsLoading] = useState(true);
  const [message, setMessage] = useState({ text: '', type: '' });
  const [depositCounter, setDepositCounter] = useState(0);

  // State form
  const [loginPhone, setLoginPhone] = useState('');
  const [loginPassword, setLoginPassword] = useState('');
  const [registerPhone, setRegisterPhone] = useState('');
  const [registerPassword, setRegisterPassword] = useState('');
  const [registerConfirmPassword, setRegisterConfirmPassword] = useState('');
  const [registerReferral, setRegisterReferral] = useState('');
  const [bankName, setBankName] = useState('');
  const [accountNumber, setAccountNumber] = useState('');
  const [accountHolderName, setAccountHolderName] = useState('');
  const [depositAmount, setDepositAmount] = useState('');
  const [withdrawAmount, setWithdrawAmount] = useState('');
  const [withdrawType, setWithdrawType] = useState('');
  const [referralCode, setReferralCode] = useState('');
  const [transactions, setTransactions] = useState([]);
  const [referrals, setReferrals] = useState([]);

  // URL untuk QRIS
  const qrisUrl = "https://i.imgur.com/NP92Pd3.jpeg";

  // Fungsi utilitas untuk formatting mata uang
  const formatRupiah = (number) => {
    return new Intl.NumberFormat('id-ID', {
      style: 'currency',
      currency: 'IDR',
      minimumFractionDigits: 0
    }).format(number);
  };
  
  // Fungsi untuk menampilkan pesan notifikasi
  const showMessage = (text, type) => {
    setMessage({ text, type });
    setTimeout(() => setMessage({ text: '', type: '' }), 5000);
  };

  // Fungsi untuk mendapatkan data pengguna dari Firestore
  const getUserData = useCallback(async (uid) => {
    const userDocRef = doc(db, `artifacts/${appId}/users`, uid);
    const userDocSnap = await getDoc(userDocRef);
    if (userDocSnap.exists()) {
      return userDocSnap.data();
    }
    return null;
  }, []);

  // Fungsi untuk menyalin teks ke clipboard
  const copyToClipboard = (text) => {
    const tempInput = document.createElement('input');
    tempInput.value = text;
    document.body.appendChild(tempInput);
    tempInput.select();
    try {
      document.execCommand('copy');
      showMessage('Berhasil disalin!', 'success');
    } catch (err) {
      showMessage('Gagal menyalin.', 'error');
    } finally {
      document.body.removeChild(tempInput);
    }
  };

  // Autentikasi dan pemuatan data awal
  useEffect(() => {
    const initializeAuth = async () => {
      try {
        if (initialAuthToken) {
          await signInWithCustomToken(auth, initialAuthToken);
        } else {
          await signInAnonymously(auth);
        }
      } catch (error) {
        console.error('Authentication failed:', error);
      }
    };
    initializeAuth();

    const unsubscribe = onAuthStateChanged(auth, async (user) => {
      if (user) {
        const userData = await getUserData(user.uid);
        if (userData) {
          setUser({ uid: user.uid, ...userData });
          setCurrentPage('dashboard');
        } else {
          setUser({ uid: user.uid });
          // Check for referral code in URL
          const urlParams = new URLSearchParams(window.location.search);
          const refCode = urlParams.get('ref');
          if (refCode) {
            setRegisterReferral(refCode);
          }
          setCurrentPage('register');
        }
      }
      setIsLoading(false);
    });

    return () => unsubscribe();
  }, [getUserData]);

  // Real-time listener untuk data pengguna
  useEffect(() => {
    if (user && user.uid) {
      const userDocRef = doc(db, `artifacts/${appId}/users`, user.uid);
      const unsubscribe = onSnapshot(userDocRef, (docSnap) => {
        if (docSnap.exists()) {
          setUser({ uid: user.uid, ...docSnap.data() });
          setTransactions(docSnap.data().transactions || []);
        }
      }, (error) => {
        console.error('Error fetching real-time data:', error);
      });
      return () => unsubscribe();
    }
  }, [user]);
  
  // Real-time listener untuk data deposit counter
  useEffect(() => {
    const counterDocRef = doc(db, `artifacts/${appId}/public/data`, 'depositCounter');
    const unsubscribe = onSnapshot(counterDocRef, (docSnap) => {
      if (docSnap.exists()) {
        const today = new Date().toLocaleDateString('id-ID', { timeZone: 'Asia/Jakarta' });
        const data = docSnap.data();
        if (data.lastUpdatedDate !== today) {
          setDepositCounter(0);
          setDoc(counterDocRef, { count: 0, lastUpdatedDate: today });
        } else {
          setDepositCounter(data.count);
        }
      } else {
        setDepositCounter(0);
        setDoc(counterDocRef, { count: 0, lastUpdatedDate: new Date().toLocaleDateString('id-ID', { timeZone: 'Asia/Jakarta' }) });
      }
    }, (error) => {
      console.error('Error fetching deposit counter:', error);
    });
    return () => unsubscribe();
  }, []);

  // Handler untuk Registrasi
  const handleRegister = async (e) => {
    e.preventDefault();
    if (registerPassword !== registerConfirmPassword) {
      showMessage('Kata sandi tidak cocok.', 'error');
      return;
    }

    try {
      const existingUsersQuery = query(collection(db, `artifacts/${appId}/users`), where('phone', '==', registerPhone));
      const existingUsersSnap = await getDocs(existingUsersQuery);
      if (!existingUsersSnap.empty) {
        showMessage('Nomor HP sudah terdaftar.', 'error');
        return;
      }
      
      const userReferralCode = Math.random().toString(36).substr(2, 6).toUpperCase();
      let uplineUid = null;
      if (registerReferral) {
        const uplineQuery = query(collection(db, `artifacts/${appId}/users`), where('referralCode', '==', registerReferral));
        const uplineSnap = await getDocs(uplineQuery);
        if (!uplineSnap.empty) {
          uplineUid = uplineSnap.docs[0].id;
        }
      }
      
      const newUser = {
        phone: registerPhone,
        password: registerPassword, // Di aplikasi nyata, gunakan hashing
        balance: 0,
        investedBalance: 0,
        totalProfit: 0,
        totalReferralBonus: 0,
        transactions: [],
        referralCode: userReferralCode,
        uplineUid: uplineUid,
        bankAccount: { bankName: '', accountNumber: '', accountHolderName: '' }
      };

      await setDoc(doc(db, `artifacts/${appId}/users`, auth.currentUser.uid), newUser);
      setUser({ uid: auth.currentUser.uid, ...newUser });
      setCurrentPage('dashboard');
      showMessage('Registrasi berhasil! Selamat datang.', 'success');
    } catch (error) {
      console.error('Error during registration:', error);
      showMessage('Registrasi gagal. Coba lagi.', 'error');
    }
  };

  // Handler untuk Login
  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      const usersQuery = query(collection(db, `artifacts/${appId}/users`), where('phone', '==', loginPhone));
      const usersSnap = await getDocs(usersQuery);

      if (usersSnap.empty) {
        showMessage('Nomor HP tidak terdaftar.', 'error');
        return;
      }
      
      const userDoc = usersSnap.docs[0];
      const userData = userDoc.data();

      if (userData.password !== loginPassword) {
        showMessage('Kata sandi salah.', 'error');
        return;
      }
      
      // Hapus token lama dan sign-in ulang dengan token baru untuk mendapatkan UID yang benar
      await auth.signOut();
      await signInWithCustomToken(auth, initialAuthToken);

      setUser({ uid: userDoc.id, ...userData });
      setCurrentPage('dashboard');
      showMessage('Login berhasil!', 'success');
    } catch (error) {
      console.error('Error during login:', error);
      showMessage('Login gagal. Coba lagi.', 'error');
    }
  };

  // Handler untuk Deposit
  const handleDeposit = async (e) => {
    e.preventDefault();
    if (!user) return;

    const amountBase = parseInt(depositAmount, 10);
    if (isNaN(amountBase) || amountBase <= 0) {
      showMessage('Nominal tidak valid.', 'error');
      return;
    }
    
    const counterDocRef = doc(db, `artifacts/${appId}/public/data`, 'depositCounter');
    
    try {
      await runTransaction(db, async (transaction) => {
        const counterDoc = await transaction.get(counterDocRef);
        const currentCount = counterDoc.exists() ? counterDoc.data().count : 0;
        const newCount = currentCount + 1;
        transaction.set(counterDocRef, { count: newCount, lastUpdatedDate: new Date().toLocaleDateString('id-ID', { timeZone: 'Asia/Jakarta' }) });
        
        const userDocRef = doc(db, `artifacts/${appId}/users`, user.uid);
        const userDoc = await transaction.get(userDocRef);
        if (userDoc.exists()) {
          const userData = userDoc.data();
          const newTransaction = {
            id: Date.now(), // ID unik untuk transaksi
            userId: user.uid,
            type: 'deposit',
            amount: amountBase + newCount,
            date: Date.now(),
            status: 'Pending',
            paymentMethod: 'rekening' // asumsi untuk demo
          };
          const updatedTransactions = [...(userData.transactions || []), newTransaction];
          transaction.update(userDocRef, { transactions: updatedTransactions });
          // Simpan transaksi pending di koleksi terpisah untuk admin
          const pendingTxRef = doc(db, `artifacts/${appId}/public/data/pendingTransactions`, newTransaction.id.toString());
          transaction.set(pendingTxRef, newTransaction);
        }
      });
      showMessage('Deposit berhasil diajukan dan sedang menunggu persetujuan admin.', 'success');
      setDepositAmount('');
      setCurrentPage('dashboard');
    } catch (error) {
      console.error('Error during deposit transaction:', error);
      showMessage('Gagal mengajukan deposit.', 'error');
    }
  };

  // Handler untuk Penarikan
  const handleWithdrawal = async (e) => {
    e.preventDefault();
    if (!user) return;

    const amount = parseInt(withdrawAmount, 10);
    if (isNaN(amount) || amount <= 0 || amount < MIN_WITHDRAWAL_AMOUNT) {
      showMessage(`Nominal tidak valid. Minimal penarikan ${formatRupiah(MIN_WITHDRAWAL_AMOUNT)}.`, 'error');
      return;
    }

    let availableBalance = 0;
    if (withdrawType === 'profit') {
      availableBalance = user.totalProfit;
    } else if (withdrawType === 'referral') {
      availableBalance = user.totalReferralBonus;
    }

    if (amount > availableBalance) {
      showMessage('Saldo tidak mencukupi untuk penarikan.', 'error');
      return;
    }

    try {
      const userDocRef = doc(db, `artifacts/${appId}/users`, user.uid);
      await runTransaction(db, async (transaction) => {
        const userDoc = await transaction.get(userDocRef);
        if (userDoc.exists()) {
          const userData = userDoc.data();
          let newProfit = userData.totalProfit;
          let newBonus = userData.totalReferralBonus;

          if (withdrawType === 'profit') {
            newProfit -= amount;
          } else if (withdrawType === 'referral') {
            newBonus -= amount;
          }

          const newTransaction = {
            id: Date.now(), // ID unik untuk transaksi
            userId: user.uid,
            type: `withdraw_${withdrawType}`,
            amount: amount,
            date: Date.now(),
            status: 'Pending',
            bankAccount: userData.bankAccount
          };

          const updatedTransactions = [...(userData.transactions || []), newTransaction];
          transaction.update(userDocRef, {
            totalProfit: newProfit,
            totalReferralBonus: newBonus,
            transactions: updatedTransactions
          });
          
          // Simpan transaksi pending di koleksi terpisah untuk admin
          const pendingTxRef = doc(db, `artifacts/${appId}/public/data/pendingTransactions`, newTransaction.id.toString());
          transaction.set(pendingTxRef, newTransaction);
        }
      });
      showMessage('Permintaan penarikan berhasil diajukan.', 'success');
      setWithdrawAmount('');
      setCurrentPage('dashboard');
    } catch (error) {
      console.error('Error during withdrawal transaction:', error);
      showMessage('Gagal mengajukan penarikan.', 'error');
    }
  };
  
  // Handler untuk Penarikan Modal
  const handleWithdrawInvested = async (deposit) => {
    if (!user) return;
    const lockDuration = 30 * 24 * 60 * 60 * 1000;
    const now = Date.now();
    
    if (now < deposit.date + lockDuration) {
      showMessage('Modal masih dalam masa kunci 30 hari.', 'error');
      return;
    }
    
    try {
      const userDocRef = doc(db, `artifacts/${appId}/users`, user.uid);
      await runTransaction(db, async (transaction) => {
        const userDoc = await transaction.get(userDocRef);
        if (userDoc.exists()) {
          const userData = userDoc.data();
          const updatedInvestedBalance = userData.investedBalance - deposit.amount;

          // Hapus transaksi deposit dari riwayat yang dapat ditarik
          const depositIndex = userData.transactions.findIndex(tx => tx.date === deposit.date && tx.type === 'deposit');
          const updatedTransactions = [...userData.transactions];
          if (depositIndex > -1) {
              const tx = updatedTransactions.splice(depositIndex, 1)[0];
              // Tambahkan transaksi penarikan modal
              updatedTransactions.push({
                  id: Date.now(),
                  userId: user.uid,
                  type: 'withdraw_invested',
                  amount: tx.amount,
                  date: Date.now(),
                  status: 'Pending'
              });
              // Simpan transaksi pending di koleksi terpisah untuk admin
              const pendingTxRef = doc(db, `artifacts/${appId}/public/data/pendingTransactions`, updatedTransactions[updatedTransactions.length-1].id.toString());
              transaction.set(pendingTxRef, updatedTransactions[updatedTransactions.length-1]);
          }

          transaction.update(userDocRef, {
            investedBalance: updatedInvestedBalance,
            transactions: updatedTransactions
          });
        }
      });
      showMessage(`Penarikan modal sebesar ${formatRupiah(deposit.amount)} berhasil diajukan.`, 'success');
      setCurrentPage('dashboard');
    } catch (error) {
      console.error('Error during invested withdrawal:', error);
      showMessage('Gagal mengajukan penarikan modal.', 'error');
    }
  };
  
  // Hitungan mundur untuk profit
  const [countdown, setCountdown] = useState('00:00:00');
  useEffect(() => {
    const timer = setInterval(() => {
      const now = new Date();
      let nextProfitTime = new Date(now);
      
      if (now.getHours() < 12) {
        nextProfitTime.setHours(12, 0, 0, 0);
      } else {
        nextProfitTime.setDate(now.getDate() + 1);
        nextProfitTime.setHours(0, 0, 0, 0);
      }
      
      const remainingMs = nextProfitTime - now;
      const hours = Math.floor(remainingMs / (1000 * 60 * 60));
      const minutes = Math.floor((remainingMs % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((remainingMs % (1000 * 60)) / 1000);
      
      setCountdown(`${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`);
      
      // Logika profit otomatis
      if (hours === 0 && minutes === 0 && seconds === 0) {
        if (user && user.investedBalance > 0) {
            applyProfit();
        }
      }
    }, 1000);
    
    return () => clearInterval(timer);
  }, [user]);

  // Logika untuk mengaplikasikan profit
  const applyProfit = async () => {
    if (!user) return;
    const userDocRef = doc(db, `artifacts/${appId}/users`, user.uid);
    try {
      await runTransaction(db, async (transaction) => {
        const userDoc = await transaction.get(userDocRef);
        if (userDoc.exists()) {
          const userData = userDoc.data();
          const profitAmount = userData.investedBalance * 0.0025;
          const updatedBalance = userData.balance + profitAmount;
          const updatedProfit = userData.totalProfit + profitAmount;
          const newTransaction = {
            type: 'profit',
            amount: profitAmount,
            date: Date.now(),
            status: 'Completed'
          };
          const updatedTransactions = [...(userData.transactions || []), newTransaction];
          transaction.update(userDocRef, {
            balance: updatedBalance,
            totalProfit: updatedProfit,
            transactions: updatedTransactions
          });
        }
      });
      showMessage(`Keuntungan sebesar ${formatRupiah(user.investedBalance * 0.0025)} telah ditambahkan!`, 'info');
    } catch (error) {
      console.error('Gagal menerapkan profit:', error);
    }
  };
  
  // Logika untuk menyetujui transaksi (oleh Admin)
  const handleApprove = async (transaction) => {
    if (user.uid !== adminUid) {
      showMessage('Anda tidak memiliki izin untuk melakukan tindakan ini.', 'error');
      return;
    }
    
    const userDocRef = doc(db, `artifacts/${appId}/users`, transaction.userId);
    const pendingTxRef = doc(db, `artifacts/${appId}/public/data/pendingTransactions`, transaction.id.toString());
    
    try {
      await runTransaction(db, async (tx) => {
        const userDoc = await tx.get(userDocRef);
        if (!userDoc.exists()) throw "User not found";
        
        const userData = userDoc.data();
        let newBalance = userData.balance;
        let newInvestedBalance = userData.investedBalance;

        // Update saldo berdasarkan tipe transaksi
        if (transaction.type === 'deposit') {
          newBalance += transaction.amount;
          newInvestedBalance += transaction.amount;
        } else if (transaction.type.startsWith('withdraw')) {
          newBalance -= transaction.amount;
        }

        const newTransaction = { ...transaction, status: 'Completed', processedDate: Date.now() };
        
        tx.update(userDocRef, {
          balance: newBalance,
          investedBalance: newInvestedBalance,
          transactions: arrayUnion(newTransaction)
        });
        
        // Hapus dari daftar transaksi pending
        tx.delete(pendingTxRef);

        // Jika deposit, berikan bonus referral jika ada
        if (transaction.type === 'deposit' && userData.uplineUid) {
          const uplineDocRef = doc(db, `artifacts/${appId}/users`, userData.uplineUid);
          const uplineDoc = await tx.get(uplineDocRef);
          if (uplineDoc.exists()) {
            const uplineData = uplineDoc.data();
            const bonusAmount = transaction.amount * 0.10;
            const newUplineBonus = uplineData.totalReferralBonus + bonusAmount;
            const newUplineBalance = uplineData.balance + bonusAmount;
            const newUplineTx = {
              type: 'referral_bonus',
              amount: bonusAmount,
              date: Date.now(),
              fromUser: userData.phone,
              status: 'Completed'
            };
            tx.update(uplineDocRef, {
              totalReferralBonus: newUplineBonus,
              balance: newUplineBalance,
              transactions: arrayUnion(newUplineTx)
            });
          }
        }
      });
      showMessage('Transaksi berhasil disetujui!', 'success');
    } catch (error) {
      console.error('Error approving transaction:', error);
      showMessage('Gagal menyetujui transaksi.', 'error');
    }
  };

  // Logika untuk menolak transaksi (oleh Admin)
  const handleReject = async (transaction) => {
    if (user.uid !== adminUid) {
      showMessage('Anda tidak memiliki izin untuk melakukan tindakan ini.', 'error');
      return;
    }

    const userDocRef = doc(db, `artifacts/${appId}/users`, transaction.userId);
    const pendingTxRef = doc(db, `artifacts/${appId}/public/data/pendingTransactions`, transaction.id.toString());

    try {
      await runTransaction(db, async (tx) => {
        const userDoc = await tx.get(userDocRef);
        if (!userDoc.exists()) throw "User not found";

        const userData = userDoc.data();
        const newTransaction = { ...transaction, status: 'Failed', processedDate: Date.now() };

        tx.update(userDocRef, {
          transactions: arrayUnion(newTransaction)
        });
        
        // Jika penarikan, kembalikan saldo
        if (transaction.type.startsWith('withdraw')) {
          let newProfit = userData.totalProfit;
          let newBonus = userData.totalReferralBonus;
          let newInvestedBalance = userData.investedBalance;

          if (transaction.type === 'withdraw_profit') {
            newProfit += transaction.amount;
          } else if (transaction.type === 'withdraw_referral') {
            newBonus += transaction.amount;
          } else if (transaction.type === 'withdraw_invested') {
            newInvestedBalance += transaction.amount;
          }
          tx.update(userDocRef, {
            totalProfit: newProfit,
            totalReferralBonus: newBonus,
            investedBalance: newInvestedBalance
          });
        }
        
        // Hapus dari daftar transaksi pending
        tx.delete(pendingTxRef);
      });
      showMessage('Transaksi berhasil ditolak.', 'success');
    } catch (error) {
      console.error('Error rejecting transaction:', error);
      showMessage('Gagal menolak transaksi.', 'error');
    }
  };
  
  // Komponen untuk Notifikasi
  const MessageBox = ({ text, type }) => {
    let bgColor = '';
    if (type === 'success') bgColor = 'bg-emerald-500';
    if (type === 'error') bgColor = 'bg-red-500';
    if (type === 'info') bgColor = 'bg-blue-500';
    
    return text ? (
      <div className={`p-4 mb-6 rounded-lg text-white font-medium text-center ${bgColor}`}>
        {text}
      </div>
    ) : null;
  };
  
  // Komponen Halaman Login
  const LoginPage = () => (
    <div className="flex flex-col items-center">
      <img src="https://eimgjys.fxeyee.com/logo/637009723744748577/FXT637009723744748577_645958.png_wiki-template-global" alt="Logo InvestPro" className="w-24 h-24 rounded-full mb-6" />
      <h1 className="text-3xl sm:text-4xl font-extrabold text-white mb-2 text-center">Masuk ke InvestPro</h1>
      <p className="text-gray-400 mb-8 text-center">Selamat datang kembali! Mari kelola aset Anda.</p>
      <form onSubmit={handleLogin} className="space-y-4 w-full max-w-sm">
        <div className="flex flex-col">
          <label htmlFor="login-phone" className="text-gray-300 font-medium">Nomor HP</label>
          <input type="tel" id="login-phone" placeholder="Masukkan Nomor HP" value={loginPhone} onChange={(e) => setLoginPhone(e.target.value)} className="mt-1 p-3 bg-[#0d1117] border border-[#21262d] rounded-md focus:ring-emerald-500 focus:border-emerald-500 transition-colors" required />
        </div>
        <div className="flex flex-col">
          <label htmlFor="login-password" className="text-gray-300 font-medium">Kata Sandi</label>
          <input type="password" id="login-password" placeholder="Masukkan Kata Sandi" value={loginPassword} onChange={(e) => setLoginPassword(e.target.value)} className="mt-1 p-3 bg-[#0d1117] border border-[#21262d] rounded-md focus:ring-emerald-500 focus:border-emerald-500 transition-colors" required />
        </div>
        <button type="submit" className="w-full btn bg-emerald-600 hover:bg-emerald-700">Masuk</button>
      </form>
      <p className="text-center text-sm mt-4 text-gray-500">Belum punya akun? <a href="#" onClick={() => setCurrentPage('register')} className="text-emerald-500 hover:underline">Daftar sekarang</a></p>
    </div>
  );
  
  // Komponen Halaman Registrasi
  const RegisterPage = () => (
    <div className="flex flex-col items-center">
      <img src="https://eimgjys.fxeyee.com/logo/637009723744748577/FXT637009723744748577_645958.png_wiki-template-global" alt="Logo InvestPro" className="w-24 h-24 rounded-full mb-6" />
      <h1 className="text-3xl sm:text-4xl font-extrabold text-white mb-2 text-center">Bergabung dengan InvestPro</h1>
      <p className="text-gray-400 mb-8 text-center">Buat akun baru untuk memulai perjalanan finansial Anda.</p>
      <form onSubmit={handleRegister} className="space-y-4 w-full max-w-sm">
        <div className="flex flex-col">
          <label htmlFor="register-phone" className="text-gray-300 font-medium">Nomor HP</label>
          <input type="tel" id="register-phone" placeholder="Masukkan Nomor HP" value={registerPhone} onChange={(e) => setRegisterPhone(e.target.value)} className="mt-1 p-3 bg-[#0d1117] border border-[#21262d] rounded-md focus:ring-emerald-500 focus:border-emerald-500 transition-colors" required />
        </div>
        <div className="flex flex-col">
          <label htmlFor="register-password" className="text-gray-300 font-medium">Kata Sandi</label>
          <input type="password" id="register-password" placeholder="Buat Kata Sandi" value={registerPassword} onChange={(e) => setRegisterPassword(e.target.value)} className="mt-1 p-3 bg-[#0d1117] border border-[#21262d] rounded-md focus:ring-emerald-500 focus:border-emerald-500 transition-colors" required />
        </div>
        <div className="flex flex-col">
          <label htmlFor="register-confirm-password" className="text-gray-300 font-medium">Ulangi Kata Sandi</label>
          <input type="password" id="register-confirm-password" placeholder="Ulangi Kata Sandi" value={registerConfirmPassword} onChange={(e) => setRegisterConfirmPassword(e.target.value)} className="mt-1 p-3 bg-[#0d1117] border border-[#21262d] rounded-md focus:ring-emerald-500 focus:border-emerald-500 transition-colors" required />
        </div>
        <div className="flex flex-col">
          <label htmlFor="register-referral" className="text-gray-300 font-medium">Kode Referal (Opsional)</label>
          <input type="text" id="register-referral" placeholder="Masukkan Kode Referal (Jika ada)" value={registerReferral} onChange={(e) => setRegisterReferral(e.target.value)} className="mt-1 p-3 bg-[#0d1117] border border-[#21262d] rounded-md focus:ring-emerald-500 focus:border-emerald-500 transition-colors" />
        </div>
        <button type="submit" className="w-full btn bg-emerald-600 hover:bg-emerald-700">Daftar</button>
      </form>
      <p className="text-center text-sm mt-4 text-gray-500">Sudah punya akun? <a href="#" onClick={() => setCurrentPage('login')} className="text-emerald-500 hover:underline">Masuk sekarang</a></p>
    </div>
  );
  
  // Komponen Halaman Dashboard
  const DashboardPage = () => {
    if (!user) return null;
    return (
      <div className="fade-in">
        <div className="flex justify-between items-center mb-6">
          <div className="flex-1">
            <img src="https://eimgjys.fxeyee.com/logo/637009723744748577/FXT637009723744748577_645958.png_wiki-template-global" alt="Logo InvestPro" className="w-16 h-16 rounded-full inline-block mr-4" />
            <h1 className="text-4xl font-extrabold text-white inline-block align-middle">InvestPro</h1>
            <p className="text-sm text-gray-500 mt-1">Dapatkan penghasilan tak terbatas setiap 12 jam, modal dapat ditarik setelah 30 hari.</p>
          </div>
          <button onClick={() => setCurrentPage('login')} className="bg-gray-700 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg transition-colors">Keluar</button>
        </div>
        
        {user.uid === adminUid && (
          <div className="mb-6">
            <button onClick={() => setCurrentPage('admin')} className="w-full btn bg-fuchsia-600 hover:bg-fuchsia-700">Halaman Admin</button>
          </div>
        )}
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
          <div className="card p-6 rounded-xl border-l-4 border-blue-500 flex flex-col justify-between">
            <div>
              <p className="text-sm font-semibold text-gray-400 uppercase tracking-wide">Saldo Saat Ini</p>
              <h2 className="mt-1 text-2xl font-bold text-white">{formatRupiah(user.balance)}</h2>
            </div>
            <button onClick={() => setCurrentPage('deposit')} className="btn btn-sm mt-4 bg-blue-600 hover:bg-blue-700">Top Up Dana</button>
          </div>
          <div className="card p-6 rounded-xl border-l-4 border-yellow-500 flex flex-col justify-between">
            <div>
              <p className="text-sm font-semibold text-gray-400 uppercase tracking-wide">Dana Terinvestasi</p>
              <h2 className="mt-1 text-2xl font-bold text-white">{formatRupiah(user.investedBalance)}</h2>
            </div>
            <button onClick={() => setCurrentPage('withdraw-invested')} className="btn btn-sm mt-4 bg-red-600 hover:bg-red-700">Ajukan Penarikan Modal</button>
          </div>
          <div className="card p-6 rounded-xl border-l-4 border-emerald-500 flex flex-col justify-between">
            <div>
              <p className="text-sm font-semibold text-gray-400 uppercase tracking-wide">Total Keuntungan</p>
              <h2 className="mt-1 text-2xl font-bold text-white">{formatRupiah(user.totalProfit)}</h2>
            </div>
            <button onClick={() => { setWithdrawType('profit'); setCurrentPage('withdraw'); }} className="btn btn-sm mt-4 bg-red-600 hover:bg-red-700">Ajukan Penarikan Profit</button>
          </div>
          <div className="card p-6 rounded-xl border-l-4 border-fuchsia-500 flex flex-col justify-between">
            <div>
              <p className="text-sm font-semibold text-gray-400 uppercase tracking-wide">Total Bonus Referal</p>
              <h2 className="mt-1 text-2xl font-bold text-white">{formatRupiah(user.totalReferralBonus)}</h2>
            </div>
            <button onClick={() => { setWithdrawType('referral'); setCurrentPage('withdraw'); }} className="btn btn-sm mt-4 bg-red-600 hover:bg-red-700">Ajukan Penarikan Bonus</button>
          </div>
        </div>

        <div className="card p-6 rounded-xl mb-8">
          <h3 className="text-xl font-bold text-white mb-2">Profit Selanjutnya</h3>
          <div className="flex flex-col md:flex-row items-center justify-between">
            <p className="text-2xl font-bold text-emerald-500">{formatRupiah(user.investedBalance * 0.0025)}</p>
            <div className="text-right mt-2 md:mt-0">
              <p className="text-sm text-gray-400">Profit dalam:</p>
              <p className="text-xl font-semibold text-white">{countdown}</p>
            </div>
          </div>
        </div>

        <div className="flex flex-wrap justify-center items-center gap-4 mb-8">
          <button onClick={() => setCurrentPage('bank-account')} className="btn bg-gray-600 hover:bg-gray-700">Akun Bank</button>
          <button onClick={() => setCurrentPage('referral')} className="btn bg-purple-600 hover:bg-purple-700">Referal</button>
        </div>
        <div className="text-center mb-8">
          <p className="text-gray-500 text-sm">Kode Referal Anda: <span className="font-bold text-emerald-500">{user.referralCode}</span></p>
          <button onClick={() => copyToClipboard(`${window.location.protocol}//${window.location.host}${window.location.pathname}?ref=${user.referralCode}`)} className="bg-gray-700 hover:bg-gray-600 text-white font-bold py-1 px-3 rounded-lg mt-2 text-sm transition-colors">Salin Tautan Referal</button>
        </div>

        <div className="card p-6 rounded-xl">
          <h3 className="text-xl font-bold text-white mb-4 section-header pb-2">Riwayat Transaksi</h3>
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-700">
              <thead className="bg-[#161b22]">
                <tr>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Tanggal</th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Tipe</th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Nominal</th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Status</th>
                </tr>
              </thead>
              <tbody className="bg-[#0d1117] divide-y divide-gray-700">
                {transactions.sort((a, b) => b.date - a.date).map((tx, index) => {
                  let statusClass = '';
                  let statusText = '';
                  if (tx.status === 'Completed') {
                    statusClass = 'bg-emerald-800 text-white';
                    statusText = 'Selesai';
                  } else if (tx.status === 'Pending') {
                    statusClass = 'bg-yellow-800 text-white';
                    statusText = 'Menunggu';
                  } else if (tx.status === 'Failed') {
                    statusClass = 'bg-red-800 text-white';
                    statusText = 'Gagal';
                  }
                  let txType = tx.type;
                  if (tx.type === 'deposit') {
                    txType = `${txType} (${tx.paymentMethod})`;
                  }
                  return (
                    <tr key={index}>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-400">{new Date(tx.date).toLocaleString('id-ID')}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-400">
                        <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${tx.type === 'deposit' ? 'bg-blue-800 text-white' : tx.type === 'profit' || tx.type === 'referral_bonus' ? 'bg-emerald-800 text-white' : 'bg-red-800 text-white'}`}>
                          {txType.charAt(0).toUpperCase() + txType.slice(1).replace('_', ' ').replace('withdrawinvested', 'Penarikan Modal').replace('withdrawprofit', 'Penarikan Profit').replace('withdrawreferral', 'Penarikan Bonus')}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-400">{formatRupiah(tx.amount)}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${statusClass}`}>{statusText}</span>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    );
  };
  
  // Komponen Halaman Deposit
  const DepositPage = () => {
    const uniqueCode = (depositCounter + 1).toString().padStart(3, '0');
    const amountFull = depositAmount ? parseInt(depositAmount) + parseInt(uniqueCode) : 0;
    const [paymentMethod, setPaymentMethod] = useState('rekening');
  
    return (
      <div className="fade-in">
        <h1 className="text-3xl sm:text-4xl font-extrabold text-white mb-2 text-center">Formulir Deposit</h1>
        <p className="text-gray-400 mb-8 text-center">Setiap deposit memiliki kode unik di akhir nominal. Hari ini Anda adalah orang ke-{depositCounter} yang deposit.</p>
        
        <div className="flex items-center justify-center space-x-4 mb-6">
          <button type="button" onClick={() => setPaymentMethod('rekening')} className={`px-4 py-2 rounded-lg font-bold transition-colors ${paymentMethod === 'rekening' ? 'bg-blue-600 text-white' : 'bg-gray-700'}`}>Melalui Rekening</button>
          <button type="button" onClick={() => setPaymentMethod('qris')} className={`px-4 py-2 rounded-lg font-bold transition-colors ${paymentMethod === 'qris' ? 'bg-blue-600 text-white' : 'bg-gray-700'}`}>QRIS</button>
        </div>
        
        <form onSubmit={handleDeposit} className="space-y-4 w-full max-w-sm mx-auto">
          <div className="flex flex-col">
            <label htmlFor="deposit-amount" className="text-gray-300 font-medium">Nominal Deposit</label>
            <input type="number" id="deposit-amount" placeholder="Masukkan nominal (mis. 100000)" value={depositAmount} onChange={(e) => setDepositAmount(e.target.value)} className="mt-1 p-3 bg-[#0d1117] border border-[#21262d] rounded-md focus:ring-emerald-500 focus:border-emerald-500 transition-colors" required />
          </div>
          <p className="text-sm text-gray-400">Nominal Transfer Lengkap: <span className="font-bold text-emerald-500">{formatRupiah(amountFull)}</span></p>
  
          {paymentMethod === 'rekening' && (
            <div className="rekening-container">
              <p className="font-semibold text-gray-300 mb-2">Pilihan Virtual Account:</p>
              <ul className="text-sm text-gray-400 space-y-2">
                <li className="flex items-center justify-between">
                  <span className="font-medium">BRI: 10036000032348746</span>
                  <button type="button" onClick={() => copyToClipboard('10036000032348746')} className="copy-btn bg-gray-700 hover:bg-gray-600 text-white font-bold py-1 px-3 rounded-full text-xs transition-colors">Salin</button>
                </li>
                <li className="flex items-center justify-between">
                  <span className="font-medium">CIMB Niaga: 23096000004601097</span>
                  <button type="button" onClick={() => copyToClipboard('23096000004601097')} className="copy-btn bg-gray-700 hover:bg-gray-600 text-white font-bold py-1 px-3 rounded-full text-xs transition-colors">Salin</button>
                </li>
              </ul>
            </div>
          )}
          {paymentMethod === 'qris' && (
            <div className="qris-container flex flex-col items-center">
              <p className="font-semibold text-gray-300 mb-2">Scan untuk Transfer:</p>
              <img src={qrisUrl} alt="QRIS Code" className="rounded-lg max-h-40" />
            </div>
          )}
          
          <button type="submit" className="w-full btn bg-blue-600 hover:bg-blue-700">Konfirmasi Deposit</button>
        </form>
        <p className="text-center text-sm mt-4 text-gray-500"><a href="#" onClick={() => setCurrentPage('dashboard')} className="text-emerald-500 hover:underline">Kembali ke Dashboard</a></p>
      </div>
    );
  };
  
  // Komponen Halaman Penarikan
  const WithdrawPage = () => {
    let availableBalance = 0;
    let title = '';
    if (withdrawType === 'profit') {
      availableBalance = user.totalProfit;
      title = 'Penarikan Keuntungan';
    } else if (withdrawType === 'referral') {
      availableBalance = user.totalReferralBonus;
      title = 'Penarikan Bonus Referral';
    }
  
    return (
      <div className="fade-in">
        <h1 className="text-3xl sm:text-4xl font-extrabold text-white mb-2 text-center">{title}</h1>
        <p className="text-gray-400 mb-8 text-center">Minimal penarikan adalah {formatRupiah(MIN_WITHDRAWAL_AMOUNT)}.</p>
        <form onSubmit={handleWithdrawal} className="space-y-4 w-full max-w-sm mx-auto">
          <div className="flex flex-col">
            <label htmlFor="withdraw-amount" className="text-gray-300 font-medium">Nominal Penarikan</label>
            <input type="number" id="withdraw-amount" placeholder="Masukkan nominal" value={withdrawAmount} onChange={(e) => setWithdrawAmount(e.target.value)} className="mt-1 p-3 bg-[#0d1117] border border-[#21262d] rounded-md focus:ring-emerald-500 focus:border-emerald-500 transition-colors" required />
          </div>
          <p className="text-sm text-gray-400">Saldo yang bisa ditarik: {formatRupiah(availableBalance)}</p>
          <button type="submit" className="w-full btn bg-red-600 hover:bg-red-700">Ajukan Penarikan</button>
        </form>
        <p className="text-center text-sm mt-4 text-gray-500"><a href="#" onClick={() => setCurrentPage('dashboard')} className="text-emerald-500 hover:underline">Kembali ke Dashboard</a></p>
      </div>
    );
  };
  
  // Komponen Halaman Penarikan Modal
  const WithdrawInvestedPage = () => {
    const investedDeposits = user.transactions?.filter(tx => tx.type === 'deposit' && tx.status === 'Completed') || [];
    
    return (
      <div className="fade-in">
        <h1 className="text-3xl sm:text-4xl font-extrabold text-white mb-2 text-center">Penarikan Modal</h1>
        <p className="text-gray-400 mb-8 text-center">Modal Anda dapat ditarik setelah 30 hari sejak deposit.</p>
        
        <div className="card p-6 rounded-xl">
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-700">
              <thead className="bg-[#161b22]">
                <tr>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Tanggal Deposit</th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Nominal</th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Tersedia dalam</th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Aksi</th>
                </tr>
              </thead>
              <tbody className="bg-[#0d1117] divide-y divide-gray-700">
                {investedDeposits.length > 0 ? (
                  investedDeposits.map((deposit, index) => {
                    const now = Date.now();
                    const lockDuration = 30 * 24 * 60 * 60 * 1000;
                    const unlockTime = deposit.date + lockDuration;
                    const remainingTime = unlockTime - now;
                    const isWithdrawalEnabled = remainingTime <= 0;
  
                    const remainingDays = Math.floor(remainingTime / (1000 * 60 * 60 * 24));
                    const remainingHours = Math.floor((remainingTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  
                    return (
                      <tr key={index}>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-400">{new Date(deposit.date).toLocaleDateString('id-ID')}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-400">{formatRupiah(deposit.amount)}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-400">
                          {isWithdrawalEnabled ? <span className="text-emerald-400">Tersedia</span> : `${remainingDays}h ${remainingHours}j`}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-white">
                          <button onClick={() => handleWithdrawInvested(deposit)} disabled={!isWithdrawalEnabled} className="btn btn-sm bg-red-600 hover:bg-red-700 disabled:bg-gray-500 disabled:cursor-not-allowed">
                            Tarik Modal
                          </button>
                        </td>
                      </tr>
                    );
                  })
                ) : (
                  <tr><td colSpan="4" className="px-6 py-4 text-center text-gray-500">Belum ada riwayat deposit.</td></tr>
                )}
              </tbody>
            </table>
          </div>
        </div>
        
        <p className="text-center text-sm mt-8 text-gray-500"><a href="#" onClick={() => setCurrentPage('dashboard')} className="text-emerald-500 hover:underline">Kembali ke Dashboard</a></p>
      </div>
    );
  };

  // Halaman Akun Bank
  const BankAccountPage = () => {
    const handleSaveBankAccount = async (e) => {
      e.preventDefault();
      if (!user) return;
      
      const userDocRef = doc(db, `artifacts/${appId}/users`, user.uid);
      try {
        await updateDoc(userDocRef, {
          bankAccount: { bankName, accountNumber, accountHolderName }
        });
        showMessage('Informasi akun bank berhasil disimpan.', 'success');
        setCurrentPage('dashboard');
      } catch (error) {
        console.error('Error saving bank account:', error);
        showMessage('Gagal menyimpan akun bank.', 'error');
      }
    };
    
    return (
      <div className="fade-in">
        <h1 className="text-3xl sm:text-4xl font-extrabold text-white mb-2 text-center">Akun Bank</h1>
        <p className="text-gray-400 mb-8 text-center">Isi detail akun bank Anda untuk penarikan.</p>
        <form onSubmit={handleSaveBankAccount} className="space-y-4 w-full max-w-sm mx-auto">
          <div className="flex flex-col">
            <label htmlFor="bank-name" className="text-gray-300 font-medium">Nama Bank / Wallet</label>
            <input type="text" id="bank-name" placeholder="Contoh: BCA, Dana, Gopay" value={bankName} onChange={(e) => setBankName(e.target.value)} className="mt-1 p-3 bg-[#0d1117] border border-[#21262d] rounded-md focus:ring-emerald-500 focus:border-emerald-500 transition-colors" required />
          </div>
          <div className="flex flex-col">
            <label htmlFor="account-number" className="text-gray-300 font-medium">Nomor Rekening / Nomor Wallet</label>
            <input type="number" id="account-number" placeholder="Masukkan nomor rekening/wallet" value={accountNumber} onChange={(e) => setAccountNumber(e.target.value)} className="mt-1 p-3 bg-[#0d1117] border border-[#21262d] rounded-md focus:ring-emerald-500 focus:border-emerald-500 transition-colors" required />
          </div>
          <div className="flex flex-col">
            <label htmlFor="account-holder-name" className="text-gray-300 font-medium">Nama Pemilik Rekening / Wallet</label>
            <input type="text" id="account-holder-name" placeholder="Masukkan nama pemilik" value={accountHolderName} onChange={(e) => setAccountHolderName(e.target.value)} className="mt-1 p-3 bg-[#0d1117] border border-[#21262d] rounded-md focus:ring-emerald-500 focus:border-emerald-500 transition-colors" required />
          </div>
          <button type="submit" className="w-full btn bg-blue-600 hover:bg-blue-700">Simpan Akun Bank</button>
        </form>
        <p className="text-center text-sm mt-4 text-gray-500"><a href="#" onClick={() => setCurrentPage('dashboard')} className="text-emerald-500 hover:underline">Kembali ke Dashboard</a></p>
      </div>
    );
  };
  
  // Halaman Referral
  const ReferralPage = () => {
    // Fetch referrals on page load
    useEffect(() => {
        const fetchReferrals = async () => {
            if (!user) return;
            const q = query(collection(db, `artifacts/${appId}/users`), where('uplineUid', '==', user.uid));
            const querySnapshot = await getDocs(q);
            const referredUsers = querySnapshot.docs.map(doc => doc.data());
            setReferrals(referredUsers);
        };
        fetchReferrals();
    }, [user]);

    return (
      <div className="fade-in">
        <h1 className="text-3xl sm:text-4xl font-extrabold text-white mb-2 text-center">Jaringan Referal Anda</h1>
        <p className="text-gray-400 mb-8 text-center">Lihat siapa saja yang telah bergabung melalui tautan Anda.</p>
        <div className="card p-6 rounded-xl">
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-700">
              <thead className="bg-[#161b22]">
                <tr>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Nomor HP</th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Total Deposit</th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Bonus</th>
                </tr>
              </thead>
              <tbody className="bg-[#0d1117] divide-y divide-gray-700">
                {referrals.length > 0 ? (
                  referrals.map((referral, index) => {
                    const totalDeposit = referral.transactions.filter(tx => tx.type === 'deposit' && tx.status === 'Completed').reduce((sum, tx) => sum + tx.amount, 0);
                    const bonusAmount = totalDeposit * 0.10;
                    return (
                      <tr key={index}>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-400">{referral.phone}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-400">{formatRupiah(totalDeposit)}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-400">{formatRupiah(bonusAmount)}</td>
                      </tr>
                    );
                  })
                ) : (
                  <tr><td colSpan="3" className="px-6 py-4 text-center text-gray-500">Belum ada downline.</td></tr>
                )}
              </tbody>
            </table>
          </div>
        </div>
        <p className="text-center text-sm mt-8 text-gray-500"><a href="#" onClick={() => setCurrentPage('dashboard')} className="text-emerald-500 hover:underline">Kembali ke Dashboard</a></p>
      </div>
    );
  };
  
  // Komponen Halaman Admin
  const AdminPage = () => {
    const [pendingTransactions, setPendingTransactions] = useState([]);

    useEffect(() => {
      if (user && user.uid === adminUid) {
        const q = collection(db, `artifacts/${appId}/public/data/pendingTransactions`);
        const unsubscribe = onSnapshot(q, (snapshot) => {
          const txs = snapshot.docs.map(doc => doc.data());
          setPendingTransactions(txs);
        }, (error) => {
          console.error("Error fetching pending transactions:", error);
        });
        return () => unsubscribe();
      }
    }, [user]);

    if (!user || user.uid !== adminUid) {
      return (
        <div className="text-center text-red-500 p-8">
          Akses Ditolak. Anda bukan admin.
          <p className="text-center text-sm mt-4 text-gray-500"><a href="#" onClick={() => setCurrentPage('dashboard')} className="text-emerald-500 hover:underline">Kembali ke Dashboard</a></p>
        </div>
      );
    }

    return (
      <div className="fade-in">
        <div className="flex items-center justify-between mb-6">
          <h1 className="text-3xl font-bold text-white">Dashboard Admin</h1>
          <button onClick={() => setCurrentPage('dashboard')} className="bg-gray-700 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg transition-colors">Keluar Admin</button>
        </div>

        <div className="card p-6 rounded-xl">
          <h2 className="text-xl font-bold text-white mb-4">Transaksi Menunggu Persetujuan</h2>
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-700">
              <thead className="bg-[#161b22]">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Tanggal</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">User ID</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Tipe</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Nominal</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Aksi</th>
                </tr>
              </thead>
              <tbody className="bg-[#0d1117] divide-y divide-gray-700">
                {pendingTransactions.length > 0 ? (
                  pendingTransactions.map((tx) => (
                    <tr key={tx.id}>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-400">{new Date(tx.date).toLocaleString('id-ID')}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-400 break-all">{tx.userId}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-400">
                        <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${tx.type === 'deposit' ? 'bg-blue-800' : 'bg-red-800'} text-white`}>
                          {tx.type.charAt(0).toUpperCase() + tx.type.slice(1).replace('_', ' ').replace('withdrawinvested', 'Penarikan Modal').replace('withdrawprofit', 'Penarikan Profit').replace('withdrawreferral', 'Penarikan Bonus')}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-400">{formatRupiah(tx.amount)}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm flex space-x-2">
                        <button onClick={() => handleApprove(tx)} className="bg-emerald-600 hover:bg-emerald-700 text-white font-bold py-1 px-3 rounded-md text-xs transition-colors">Setujui</button>
                        <button onClick={() => handleReject(tx)} className="bg-red-600 hover:bg-red-700 text-white font-bold py-1 px-3 rounded-md text-xs transition-colors">Tolak</button>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr><td colSpan="5" className="px-6 py-4 text-center text-gray-500">Tidak ada transaksi yang menunggu persetujuan.</td></tr>
                )}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    );
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-emerald-500"></div>
      </div>
    );
  }

  // Render halaman berdasarkan state
  const renderPage = () => {
    switch (currentPage) {
      case 'login':
        return <LoginPage />;
      case 'register':
        return <RegisterPage />;
      case 'dashboard':
        return <DashboardPage />;
      case 'deposit':
        return <DepositPage />;
      case 'withdraw':
        return <WithdrawPage />;
      case 'withdraw-invested':
        return <WithdrawInvestedPage />;
      case 'bank-account':
        return <BankAccountPage />;
      case 'referral':
        return <ReferralPage />;
      case 'admin':
        return <AdminPage />;
      default:
        return <RegisterPage />;
    }
  };

  return (
    <div className="p-4 sm:p-8 flex items-center justify-center min-h-screen">
      <div className="container mx-auto p-4 md:p-8 rounded-lg">
        <MessageBox text={message.text} type={message.type} />
        {renderPage()}
      </div>
      <style>{`
        body {
            font-family: 'Inter', sans-serif;
            background-color: #0d1117;
            color: #c9d1d9;
            transition: background-color 0.5s ease;
        }
        .container {
            max-width: 800px;
        }
        .card {
            background-color: #161b22;
            border: 1px solid #21262d;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(10px);
            border-radius: 12px;
        }
        .btn {
            background-color: #238636;
            color: #ffffff;
            font-weight: 600;
            padding: 12px 24px;
            border-radius: 8px;
            transition: background-color 0.3s ease, transform 0.2s ease;
            box-shadow: 0 4px 14px rgba(35, 134, 54, 0.4);
        }
        .btn:hover {
            background-color: #2ea043;
            transform: translateY(-2px);
        }
        .fade-in {
            animation: fadeIn 0.5s ease;
        }
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        `}</style>
    </div>
  );
};

export default App;
